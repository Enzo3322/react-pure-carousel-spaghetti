{"version":3,"file":"index.esm.js","sources":["../src/CarouselItem.tsx","../src/Carousel.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { CarouselItemProps } from './types';\n\nconst CarouselItem: React.FC<CarouselItemProps> = ({\n  children,\n  index,\n  isVisible,\n  shouldPreload,\n  width,\n  className = '',\n}) => {\n  const [shouldRender, setShouldRender] = useState<boolean>(isVisible || shouldPreload);\n\n  useEffect(() => {\n    if (isVisible || shouldPreload) {\n      setShouldRender(true);\n    }\n  }, [isVisible, shouldPreload]);\n\n  const itemStyle: React.CSSProperties = {\n    width: typeof width === 'number' ? `${width}px` : width,\n    flexShrink: 0,\n    boxSizing: 'border-box',\n  };\n\n  return (\n    <div \n      className={`carousel-item ${className}`} \n      style={itemStyle}\n      data-index={index}\n    >\n      {shouldRender ? children : <div style={{ height: '100%', width: '100%' }} />}\n    </div>\n  );\n};\n\nexport default CarouselItem; ","import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { CarouselProps } from './types';\nimport CarouselItem from './CarouselItem';\nimport './carousel.css';\n\nconst Carousel: React.FC<CarouselProps> = ({\n  children,\n  itemsPerView = 1,\n  spacing = 10,\n  lazyLoad = true,\n  preloadItems = 1,\n  infinite = false,\n  autoPlay = false,\n  autoPlayInterval = 3000,\n  className = '',\n  showIndicators = true,\n  showNavigation = true,\n  onSlideChange,\n}) => {\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [containerWidth, setContainerWidth] = useState(0);\n  const [isDragging, setIsDragging] = useState(false);\n  const [startX, setStartX] = useState(0);\n  const [translateX, setTranslateX] = useState(0);\n  \n  const containerRef = useRef<HTMLDivElement>(null);\n  const trackRef = useRef<HTMLDivElement>(null);\n  const autoPlayTimerRef = useRef<NodeJS.Timeout | null>(null);\n  \n  const childrenArray = React.Children.toArray(children);\n  const totalItems = childrenArray.length;\n  \n  // Calcular o número de slides\n  const totalSlides = Math.ceil(totalItems - itemsPerView) + 1;\n  \n  // Calcular a largura de cada item\n  const calculateItemWidth = useCallback(() => {\n    if (!containerWidth) return 0;\n    const availableWidth = containerWidth - (spacing * (Math.floor(itemsPerView) - 1));\n    return availableWidth / itemsPerView;\n  }, [containerWidth, itemsPerView, spacing]);\n  \n  const itemWidth = calculateItemWidth();\n  \n  // Atualizar a largura do container quando a janela for redimensionada\n  useEffect(() => {\n    const updateContainerWidth = () => {\n      if (containerRef.current) {\n        setContainerWidth(containerRef.current.offsetWidth);\n      }\n    };\n    \n    updateContainerWidth();\n    window.addEventListener('resize', updateContainerWidth);\n    \n    return () => {\n      window.removeEventListener('resize', updateContainerWidth);\n    };\n  }, []);\n  \n  // Configurar autoplay\n  useEffect(() => {\n    if (autoPlay && !isDragging) {\n      autoPlayTimerRef.current = setInterval(() => {\n        goToNext();\n      }, autoPlayInterval);\n    }\n    \n    return () => {\n      if (autoPlayTimerRef.current) {\n        clearInterval(autoPlayTimerRef.current);\n      }\n    };\n  }, [autoPlay, autoPlayInterval, currentIndex, isDragging]);\n  \n  // Verificar se um item está visível\n  const isItemVisible = (index: number) => {\n    return index >= currentIndex && index < currentIndex + itemsPerView;\n  };\n  \n  // Verificar se um item deve ser pré-carregado\n  const shouldPreloadItem = (index: number) => {\n    if (!lazyLoad) return true;\n    \n    const preloadStart = Math.max(0, currentIndex - preloadItems);\n    const preloadEnd = Math.min(totalItems - 1, currentIndex + itemsPerView + preloadItems);\n    \n    return index >= preloadStart && index <= preloadEnd;\n  };\n  \n  // Navegar para o próximo slide\n  const goToNext = useCallback(() => {\n    setCurrentIndex((prevIndex) => {\n      const nextIndex = prevIndex + 1;\n      if (nextIndex > totalItems - itemsPerView) {\n        return infinite ? 0 : totalItems - itemsPerView;\n      }\n      return nextIndex;\n    });\n  }, [infinite, itemsPerView, totalItems]);\n  \n  // Navegar para o slide anterior\n  const goToPrev = useCallback(() => {\n    setCurrentIndex((prevIndex) => {\n      const nextIndex = prevIndex - 1;\n      if (nextIndex < 0) {\n        return infinite ? totalItems - itemsPerView : 0;\n      }\n      return nextIndex;\n    });\n  }, [infinite, itemsPerView, totalItems]);\n  \n  // Navegar para um slide específico\n  const goToSlide = useCallback((index: number) => {\n    const validIndex = Math.max(0, Math.min(index, totalItems - itemsPerView));\n    setCurrentIndex(validIndex);\n    \n    if (onSlideChange) {\n      onSlideChange(validIndex);\n    }\n  }, [itemsPerView, onSlideChange, totalItems]);\n  \n  // Manipuladores de eventos de arrastar\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement>) => {\n    setIsDragging(true);\n    setStartX(e.clientX);\n    \n    if (autoPlayTimerRef.current) {\n      clearInterval(autoPlayTimerRef.current);\n    }\n  };\n  \n  const handleTouchStart = (e: React.TouchEvent<HTMLDivElement>) => {\n    setIsDragging(true);\n    setStartX(e.touches[0].clientX);\n    \n    if (autoPlayTimerRef.current) {\n      clearInterval(autoPlayTimerRef.current);\n    }\n  };\n  \n  const handleMouseMove = (e: React.MouseEvent<HTMLDivElement>) => {\n    if (!isDragging) return;\n    \n    const currentX = e.clientX;\n    const diff = currentX - startX;\n    \n    setTranslateX(diff);\n  };\n  \n  const handleTouchMove = (e: React.TouchEvent<HTMLDivElement>) => {\n    if (!isDragging) return;\n    \n    const currentX = e.touches[0].clientX;\n    const diff = currentX - startX;\n    \n    setTranslateX(diff);\n  };\n  \n  const handleDragEnd = () => {\n    if (!isDragging) return;\n    \n    setIsDragging(false);\n    \n    // Determinar se deve navegar para o próximo ou anterior com base na distância arrastada\n    if (Math.abs(translateX) > itemWidth / 3) {\n      if (translateX > 0) {\n        goToPrev();\n      } else {\n        goToNext();\n      }\n    }\n    \n    setTranslateX(0);\n  };\n  \n  // Calcular a posição do track\n  const trackPosition = -currentIndex * (itemWidth + spacing);\n  const trackStyle: React.CSSProperties = {\n    transform: `translateX(${trackPosition + translateX}px)`,\n    transition: isDragging ? 'none' : 'transform 0.3s ease',\n    display: 'flex',\n    gap: `${spacing}px`,\n  };\n  \n  return (\n    <div \n      className={`carousel-container ${className}`} \n      ref={containerRef}\n    >\n      <div \n        className=\"carousel-track-container\"\n        onMouseDown={handleMouseDown}\n        onMouseMove={handleMouseMove}\n        onMouseUp={handleDragEnd}\n        onMouseLeave={handleDragEnd}\n        onTouchStart={handleTouchStart}\n        onTouchMove={handleTouchMove}\n        onTouchEnd={handleDragEnd}\n      >\n        <div \n          className=\"carousel-track\" \n          ref={trackRef}\n          style={trackStyle}\n        >\n          {childrenArray.map((child, index) => (\n            <CarouselItem\n              key={index}\n              index={index}\n              isVisible={isItemVisible(index)}\n              shouldPreload={shouldPreloadItem(index)}\n              width={itemWidth}\n            >\n              {child}\n            </CarouselItem>\n          ))}\n        </div>\n      </div>\n      \n      {showNavigation && totalSlides > 1 && (\n        <div className=\"carousel-navigation\">\n          <button \n            className=\"carousel-nav-button prev\"\n            onClick={goToPrev}\n            disabled={!infinite && currentIndex === 0}\n            aria-label=\"Previous slide\"\n          >\n            &lt;\n          </button>\n          <button \n            className=\"carousel-nav-button next\"\n            onClick={goToNext}\n            disabled={!infinite && currentIndex >= totalItems - itemsPerView}\n            aria-label=\"Next slide\"\n          >\n            &gt;\n          </button>\n        </div>\n      )}\n      \n      {showIndicators && totalSlides > 1 && (\n        <div className=\"carousel-indicators\">\n          {Array.from({ length: totalSlides }).map((_, index) => (\n            <button\n              key={index}\n              className={`carousel-indicator ${index === Math.floor(currentIndex) ? 'active' : ''}`}\n              onClick={() => goToSlide(index)}\n              aria-label={`Go to slide ${index + 1}`}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Carousel; "],"names":["CarouselItem","_a","children","index","isVisible","shouldPreload","width","_b","className","_c","useState","shouldRender","setShouldRender","useEffect","itemStyle","concat","flexShrink","boxSizing","React","createElement","style","height","Carousel","itemsPerView","spacing","_d","lazyLoad","_e","preloadItems","_f","infinite","_g","autoPlay","_h","autoPlayInterval","_j","_k","showIndicators","_l","showNavigation","onSlideChange","_m","currentIndex","setCurrentIndex","_o","containerWidth","setContainerWidth","_p","isDragging","setIsDragging","_q","startX","setStartX","_r","translateX","setTranslateX","containerRef","useRef","trackRef","autoPlayTimerRef","childrenArray","Children","toArray","totalItems","length","totalSlides","Math","ceil","itemWidth","useCallback","floor","calculateItemWidth","updateContainerWidth","current","offsetWidth","window","addEventListener","removeEventListener","setInterval","goToNext","clearInterval","isItemVisible","shouldPreloadItem","preloadStart","max","preloadEnd","min","prevIndex","nextIndex","goToPrev","goToSlide","validIndex","handleDragEnd","abs","trackStyle","transform","transition","display","gap","ref","onMouseDown","e","clientX","onMouseMove","currentX","onMouseUp","onMouseLeave","onTouchStart","touches","onTouchMove","onTouchEnd","map","child","key","onClick","disabled","Array","from","_"],"mappings":"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"}